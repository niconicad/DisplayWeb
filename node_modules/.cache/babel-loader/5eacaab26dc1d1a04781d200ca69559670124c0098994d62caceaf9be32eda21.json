{"ast":null,"code":"function Cache() {\n  var e = Object.create(null);\n  function a(a) {\n    delete e[a];\n  }\n  this.set = function (n, i, r) {\n    if (void 0 !== r && (\"number\" != typeof r || isNaN(r) || r <= 0)) throw new Error(\"Cache timeout must be a positive number\");\n    var t = e[n];\n    t && clearTimeout(t.timeout);\n    var o = {\n      value: i,\n      expire: r + Date.now()\n    };\n    return isNaN(o.expire) || (o.timeout = setTimeout(() => a(n), r)), e[n] = o, i;\n  }, this.del = function (n) {\n    var i = !0,\n      r = e[n];\n    return r ? (clearTimeout(r.timeout), !isNaN(r.expire) && r.expire < Date.now() && (i = !1)) : i = !1, i && a(n), i;\n  }, this.clear = function () {\n    for (var a in e) clearTimeout(e[a].timeout);\n    e = Object.create(null);\n  }, this.get = function (a) {\n    var n = e[a];\n    if (void 0 !== n) {\n      if (isNaN(n.expire) || n.expire >= Date.now()) return n.value;\n      delete e[a];\n    }\n    return null;\n  };\n}\nconst exp$1 = new Cache();\nexp$1.Cache = Cache;\nconst base = \"https://translate.googleapis.com/translate_a/single\";\nvar google = {\n    fetch: ({\n      key: e,\n      from: a,\n      to: n,\n      text: i\n    }) => [`${base}?client=gtx&sl=${a}&tl=${n}&dt=t&q=${encodeURI(i)}`],\n    parse: e => e.json().then(e => {\n      if (!(e = e && e[0] && e[0][0] && e[0].map(e => e[0]).join(\"\"))) throw new Error(\"Translation not found\");\n      return e;\n    })\n  },\n  yandex = {\n    needkey: !0,\n    fetch: ({\n      key: e,\n      from: a,\n      to: n,\n      text: i\n    }) => [`https://translate.yandex.net/api/v1.5/tr.json/translate?key=${e}&lang=${a}-${n}&text=${encodeURIComponent(i)}`, {\n      method: \"POST\",\n      body: \"\"\n    }],\n    parse: e => e.json().then(e => {\n      if (200 !== e.code) throw new Error(e.message);\n      return e.text[0];\n    })\n  };\nconst libreUrl = \"https://libretranslate.com/translate\";\nvar libre = {\n    needkey: !1,\n    fetch: ({\n      url: e = libreUrl,\n      key: a,\n      from: n,\n      to: i,\n      text: r\n    }) => [e, {\n      method: \"POST\",\n      body: JSON.stringify({\n        q: r,\n        source: n,\n        target: i,\n        api_key: a\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }],\n    parse: e => e.json().then(e => {\n      if (!e) throw new Error(\"No response found\");\n      if (e.error) throw new Error(e.error);\n      if (!e.translatedText) throw new Error(\"No response found\");\n      return e.translatedText;\n    })\n  },\n  deepl = {\n    needkey: !0,\n    fetch: ({\n      key: e,\n      from: a,\n      to: n,\n      text: i\n    }) => [`https://api${e.endsWith(\":fx\") ? \"-free\" : \"\"}.deepl.com/v2/translate?auth_key=${e}&source_lang=${a}&target_lang=${n}&text=${i = encodeURIComponent(i)}`, {\n      method: \"POST\",\n      body: \"\"\n    }],\n    parse: async e => {\n      if (!e.ok) {\n        if (403 === e.status) throw new Error(\"Auth Error, please review the key for DeepL\");\n        throw new Error(`Error ${e.status}`);\n      }\n      return e.json().then(e => e.translations[0].text);\n    }\n  },\n  engines = {\n    google: google,\n    yandex: yandex,\n    libre: libre,\n    deepl: deepl\n  },\n  iso = {\n    aar: \"aa\",\n    abk: \"ab\",\n    afr: \"af\",\n    aka: \"ak\",\n    alb: \"sq\",\n    amh: \"am\",\n    ara: \"ar\",\n    arg: \"an\",\n    arm: \"hy\",\n    asm: \"as\",\n    ava: \"av\",\n    ave: \"ae\",\n    aym: \"ay\",\n    aze: \"az\",\n    bak: \"ba\",\n    bam: \"bm\",\n    baq: \"eu\",\n    bel: \"be\",\n    ben: \"bn\",\n    bih: \"bh\",\n    bis: \"bi\",\n    bos: \"bs\",\n    bre: \"br\",\n    bul: \"bg\",\n    bur: \"my\",\n    cat: \"ca\",\n    cha: \"ch\",\n    che: \"ce\",\n    chi: \"zh\",\n    chu: \"cu\",\n    chv: \"cv\",\n    cor: \"kw\",\n    cos: \"co\",\n    cre: \"cr\",\n    cze: \"cs\",\n    dan: \"da\",\n    div: \"dv\",\n    dut: \"nl\",\n    dzo: \"dz\",\n    eng: \"en\",\n    epo: \"eo\",\n    est: \"et\",\n    ewe: \"ee\",\n    fao: \"fo\",\n    fij: \"fj\",\n    fin: \"fi\",\n    fre: \"fr\",\n    fry: \"fy\",\n    ful: \"ff\",\n    geo: \"ka\",\n    ger: \"de\",\n    gla: \"gd\",\n    gle: \"ga\",\n    glg: \"gl\",\n    glv: \"gv\",\n    gre: \"el\",\n    grn: \"gn\",\n    guj: \"gu\",\n    hat: \"ht\",\n    hau: \"ha\",\n    heb: \"he\",\n    her: \"hz\",\n    hin: \"hi\",\n    hmo: \"ho\",\n    hrv: \"hr\",\n    hun: \"hu\",\n    ibo: \"ig\",\n    ice: \"is\",\n    ido: \"io\",\n    iii: \"ii\",\n    iku: \"iu\",\n    ile: \"ie\",\n    ina: \"ia\",\n    ind: \"id\",\n    ipk: \"ik\",\n    ita: \"it\",\n    jav: \"jv\",\n    jpn: \"ja\",\n    kal: \"kl\",\n    kan: \"kn\",\n    kas: \"ks\",\n    kau: \"kr\",\n    kaz: \"kk\",\n    khm: \"km\",\n    kik: \"ki\",\n    kin: \"rw\",\n    kir: \"ky\",\n    kom: \"kv\",\n    kon: \"kg\",\n    kor: \"ko\",\n    kua: \"kj\",\n    kur: \"ku\",\n    lao: \"lo\",\n    lat: \"la\",\n    lav: \"lv\",\n    lim: \"li\",\n    lin: \"ln\",\n    lit: \"lt\",\n    ltz: \"lb\",\n    lub: \"lu\",\n    lug: \"lg\",\n    mac: \"mk\",\n    mah: \"mh\",\n    mal: \"ml\",\n    mao: \"mi\",\n    mar: \"mr\",\n    may: \"ms\",\n    mlg: \"mg\",\n    mlt: \"mt\",\n    mon: \"mn\",\n    nau: \"na\",\n    nav: \"nv\",\n    nbl: \"nr\",\n    nde: \"nd\",\n    ndo: \"ng\",\n    nep: \"ne\",\n    nno: \"nn\",\n    nob: \"nb\",\n    nor: \"no\",\n    nya: \"ny\",\n    oci: \"oc\",\n    oji: \"oj\",\n    ori: \"or\",\n    orm: \"om\",\n    oss: \"os\",\n    pan: \"pa\",\n    per: \"fa\",\n    pli: \"pi\",\n    pol: \"pl\",\n    por: \"pt\",\n    pus: \"ps\",\n    que: \"qu\",\n    roh: \"rm\",\n    rum: \"ro\",\n    run: \"rn\",\n    rus: \"ru\",\n    sag: \"sg\",\n    san: \"sa\",\n    sin: \"si\",\n    slo: \"sk\",\n    slv: \"sl\",\n    sme: \"se\",\n    smo: \"sm\",\n    sna: \"sn\",\n    snd: \"sd\",\n    som: \"so\",\n    sot: \"st\",\n    spa: \"es\",\n    srd: \"sc\",\n    srp: \"sr\",\n    ssw: \"ss\",\n    sun: \"su\",\n    swa: \"sw\",\n    swe: \"sv\",\n    tah: \"ty\",\n    tam: \"ta\",\n    tat: \"tt\",\n    tel: \"te\",\n    tgk: \"tg\",\n    tgl: \"tl\",\n    tha: \"th\",\n    tib: \"bo\",\n    tir: \"ti\",\n    ton: \"to\",\n    tsn: \"tn\",\n    tso: \"ts\",\n    tuk: \"tk\",\n    tur: \"tr\",\n    twi: \"tw\",\n    uig: \"ug\",\n    ukr: \"uk\",\n    urd: \"ur\",\n    uzb: \"uz\",\n    ven: \"ve\",\n    vie: \"vi\",\n    vol: \"vo\",\n    wel: \"cy\",\n    wln: \"wa\",\n    wol: \"wo\",\n    xho: \"xh\",\n    yid: \"yi\",\n    yor: \"yo\",\n    zha: \"za\",\n    zul: \"zu\"\n  },\n  names = {\n    afar: \"aa\",\n    abkhazian: \"ab\",\n    afrikaans: \"af\",\n    akan: \"ak\",\n    albanian: \"sq\",\n    amharic: \"am\",\n    arabic: \"ar\",\n    aragonese: \"an\",\n    armenian: \"hy\",\n    assamese: \"as\",\n    avaric: \"av\",\n    avestan: \"ae\",\n    aymara: \"ay\",\n    azerbaijani: \"az\",\n    bashkir: \"ba\",\n    bambara: \"bm\",\n    basque: \"eu\",\n    belarusian: \"be\",\n    bengali: \"bn\",\n    \"bihari languages\": \"bh\",\n    bislama: \"bi\",\n    tibetan: \"bo\",\n    bosnian: \"bs\",\n    breton: \"br\",\n    bulgarian: \"bg\",\n    burmese: \"my\",\n    catalan: \"ca\",\n    valencian: \"ca\",\n    czech: \"cs\",\n    chamorro: \"ch\",\n    chechen: \"ce\",\n    chinese: \"zh\",\n    \"church slavic\": \"cu\",\n    \"old slavonic\": \"cu\",\n    \"church slavonic\": \"cu\",\n    \"old bulgarian\": \"cu\",\n    \"old church slavonic\": \"cu\",\n    chuvash: \"cv\",\n    cornish: \"kw\",\n    corsican: \"co\",\n    cree: \"cr\",\n    welsh: \"cy\",\n    danish: \"da\",\n    german: \"de\",\n    divehi: \"dv\",\n    dhivehi: \"dv\",\n    maldivian: \"dv\",\n    dutch: \"nl\",\n    flemish: \"nl\",\n    dzongkha: \"dz\",\n    greek: \"el\",\n    english: \"en\",\n    esperanto: \"eo\",\n    estonian: \"et\",\n    ewe: \"ee\",\n    faroese: \"fo\",\n    persian: \"fa\",\n    fijian: \"fj\",\n    finnish: \"fi\",\n    french: \"fr\",\n    \"western frisian\": \"fy\",\n    fulah: \"ff\",\n    georgian: \"ka\",\n    gaelic: \"gd\",\n    \"scottish gaelic\": \"gd\",\n    irish: \"ga\",\n    galician: \"gl\",\n    manx: \"gv\",\n    guarani: \"gn\",\n    gujarati: \"gu\",\n    haitian: \"ht\",\n    \"haitian creole\": \"ht\",\n    hausa: \"ha\",\n    hebrew: \"he\",\n    herero: \"hz\",\n    hindi: \"hi\",\n    \"hiri motu\": \"ho\",\n    croatian: \"hr\",\n    hungarian: \"hu\",\n    igbo: \"ig\",\n    icelandic: \"is\",\n    ido: \"io\",\n    \"sichuan yi\": \"ii\",\n    nuosu: \"ii\",\n    inuktitut: \"iu\",\n    interlingue: \"ie\",\n    occidental: \"ie\",\n    interlingua: \"ia\",\n    indonesian: \"id\",\n    inupiaq: \"ik\",\n    italian: \"it\",\n    javanese: \"jv\",\n    japanese: \"ja\",\n    kalaallisut: \"kl\",\n    greenlandic: \"kl\",\n    kannada: \"kn\",\n    kashmiri: \"ks\",\n    kanuri: \"kr\",\n    kazakh: \"kk\",\n    \"central khmer\": \"km\",\n    kikuyu: \"ki\",\n    gikuyu: \"ki\",\n    kinyarwanda: \"rw\",\n    kirghiz: \"ky\",\n    kyrgyz: \"ky\",\n    komi: \"kv\",\n    kongo: \"kg\",\n    korean: \"ko\",\n    kuanyama: \"kj\",\n    kwanyama: \"kj\",\n    kurdish: \"ku\",\n    lao: \"lo\",\n    latin: \"la\",\n    latvian: \"lv\",\n    limburgan: \"li\",\n    limburger: \"li\",\n    limburgish: \"li\",\n    lingala: \"ln\",\n    lithuanian: \"lt\",\n    luxembourgish: \"lb\",\n    letzeburgesch: \"lb\",\n    \"luba-katanga\": \"lu\",\n    ganda: \"lg\",\n    macedonian: \"mk\",\n    marshallese: \"mh\",\n    malayalam: \"ml\",\n    maori: \"mi\",\n    marathi: \"mr\",\n    malay: \"ms\",\n    malagasy: \"mg\",\n    maltese: \"mt\",\n    mongolian: \"mn\",\n    nauru: \"na\",\n    navajo: \"nv\",\n    navaho: \"nv\",\n    \"ndebele, south\": \"nr\",\n    \"south ndebele\": \"nr\",\n    \"ndebele, north\": \"nd\",\n    \"north ndebele\": \"nd\",\n    ndonga: \"ng\",\n    nepali: \"ne\",\n    \"norwegian nynorsk\": \"nn\",\n    \"nynorsk, norwegian\": \"nn\",\n    \"norwegian bokmål\": \"nb\",\n    \"bokmål, norwegian\": \"nb\",\n    norwegian: \"no\",\n    chichewa: \"ny\",\n    chewa: \"ny\",\n    nyanja: \"ny\",\n    occitan: \"oc\",\n    ojibwa: \"oj\",\n    oriya: \"or\",\n    oromo: \"om\",\n    ossetian: \"os\",\n    ossetic: \"os\",\n    panjabi: \"pa\",\n    punjabi: \"pa\",\n    pali: \"pi\",\n    polish: \"pl\",\n    portuguese: \"pt\",\n    pushto: \"ps\",\n    pashto: \"ps\",\n    quechua: \"qu\",\n    romansh: \"rm\",\n    romanian: \"ro\",\n    moldavian: \"ro\",\n    moldovan: \"ro\",\n    rundi: \"rn\",\n    russian: \"ru\",\n    sango: \"sg\",\n    sanskrit: \"sa\",\n    sinhala: \"si\",\n    sinhalese: \"si\",\n    slovak: \"sk\",\n    slovenian: \"sl\",\n    \"northern sami\": \"se\",\n    samoan: \"sm\",\n    shona: \"sn\",\n    sindhi: \"sd\",\n    somali: \"so\",\n    \"sotho, southern\": \"st\",\n    spanish: \"es\",\n    castilian: \"es\",\n    sardinian: \"sc\",\n    serbian: \"sr\",\n    swati: \"ss\",\n    sundanese: \"su\",\n    swahili: \"sw\",\n    swedish: \"sv\",\n    tahitian: \"ty\",\n    tamil: \"ta\",\n    tatar: \"tt\",\n    telugu: \"te\",\n    tajik: \"tg\",\n    tagalog: \"tl\",\n    thai: \"th\",\n    tigrinya: \"ti\",\n    tonga: \"to\",\n    tswana: \"tn\",\n    tsonga: \"ts\",\n    turkmen: \"tk\",\n    turkish: \"tr\",\n    twi: \"tw\",\n    uighur: \"ug\",\n    uyghur: \"ug\",\n    ukrainian: \"uk\",\n    urdu: \"ur\",\n    uzbek: \"uz\",\n    venda: \"ve\",\n    vietnamese: \"vi\",\n    \"volapük\": \"vo\",\n    walloon: \"wa\",\n    wolof: \"wo\",\n    xhosa: \"xh\",\n    yiddish: \"yi\",\n    yoruba: \"yo\",\n    zhuang: \"za\",\n    chuang: \"za\",\n    zulu: \"zu\"\n  };\nconst isoKeys = Object.values(iso).sort();\nvar languages = e => {\n  if (\"string\" != typeof e) throw new Error('The \"language\" must be a string, received ' + typeof e);\n  if (e.length > 100) throw new Error(`The \"language\" is too long at ${e.length} characters`);\n  if (e = e.toLowerCase(), e = names[e] || iso[e] || e, !isoKeys.includes(e)) throw new Error(`The language \"${e}\" is not part of the ISO 639-1`);\n  return e;\n};\nconst Translate = function (e = {}) {\n    if (!(this instanceof Translate)) return new Translate(e);\n    const a = {\n        from: \"en\",\n        to: \"en\",\n        cache: void 0,\n        engine: \"google\",\n        key: void 0,\n        url: void 0,\n        languages: languages,\n        engines: engines,\n        keys: {}\n      },\n      n = async (e, a = {}) => {\n        \"string\" == typeof a && (a = {\n          to: a\n        });\n        const i = Object.keys(a).find(e => \"from\" !== e && \"to\" !== e);\n        if (i) throw new Error(`Invalid option with the name '${i}'`);\n        a.text = e, a.from = languages(a.from || n.from), a.to = languages(a.to || n.to), a.cache = n.cache, a.engine = n.engine, a.url = n.url, a.id = `${a.url}:${a.from}:${a.to}:${a.engine}:${a.text}`, a.keys = n.keys || {};\n        for (let e in n.keys) a.keys[e] = a.keys[e] || n.keys[e];\n        a.key = a.key || n.key || a.keys[a.engine];\n        const r = n.engines[a.engine],\n          t = exp$1.get(a.id);\n        if (t) return Promise.resolve(t);\n        if (a.to === a.from) return Promise.resolve(a.text);\n        if (r.needkey && !a.key) throw new Error(`The engine \"${a.engine}\" needs a key, please provide it`);\n        const o = r.fetch(a);\n        return fetch(...o).then(r.parse).then(e => exp$1.set(a.id, e, a.cache));\n      };\n    for (let i in a) n[i] = void 0 === e[i] ? a[i] : e[i];\n    return n;\n  },\n  exp = new Translate();\nexp.Translate = Translate;\nexport { Translate, exp as default };","map":{"version":3,"names":["Cache","e","Object","create","a","set","n","i","r","isNaN","Error","t","clearTimeout","timeout","o","value","expire","Date","now","setTimeout","del","clear","get","exp$1","base","google","fetch","key","from","to","text","encodeURI","parse","json","then","map","join","yandex","needkey","encodeURIComponent","method","body","code","message","libreUrl","libre","url","JSON","stringify","q","source","target","api_key","headers","error","translatedText","deepl","endsWith","ok","status","translations","engines","iso","aar","abk","afr","aka","alb","amh","ara","arg","arm","asm","ava","ave","aym","aze","bak","bam","baq","bel","ben","bih","bis","bos","bre","bul","bur","cat","cha","che","chi","chu","chv","cor","cos","cre","cze","dan","div","dut","dzo","eng","epo","est","ewe","fao","fij","fin","fre","fry","ful","geo","ger","gla","gle","glg","glv","gre","grn","guj","hat","hau","heb","her","hin","hmo","hrv","hun","ibo","ice","ido","iii","iku","ile","ina","ind","ipk","ita","jav","jpn","kal","kan","kas","kau","kaz","khm","kik","kin","kir","kom","kon","kor","kua","kur","lao","lat","lav","lim","lin","lit","ltz","lub","lug","mac","mah","mal","mao","mar","may","mlg","mlt","mon","nau","nav","nbl","nde","ndo","nep","nno","nob","nor","nya","oci","oji","ori","orm","oss","pan","per","pli","pol","por","pus","que","roh","rum","run","rus","sag","san","sin","slo","slv","sme","smo","sna","snd","som","sot","spa","srd","srp","ssw","sun","swa","swe","tah","tam","tat","tel","tgk","tgl","tha","tib","tir","ton","tsn","tso","tuk","tur","twi","uig","ukr","urd","uzb","ven","vie","vol","wel","wln","wol","xho","yid","yor","zha","zul","names","afar","abkhazian","afrikaans","akan","albanian","amharic","arabic","aragonese","armenian","assamese","avaric","avestan","aymara","azerbaijani","bashkir","bambara","basque","belarusian","bengali","bislama","tibetan","bosnian","breton","bulgarian","burmese","catalan","valencian","czech","chamorro","chechen","chinese","chuvash","cornish","corsican","cree","welsh","danish","german","divehi","dhivehi","maldivian","dutch","flemish","dzongkha","greek","english","esperanto","estonian","faroese","persian","fijian","finnish","french","fulah","georgian","gaelic","irish","galician","manx","guarani","gujarati","haitian","hausa","hebrew","herero","hindi","croatian","hungarian","igbo","icelandic","nuosu","inuktitut","interlingue","occidental","interlingua","indonesian","inupiaq","italian","javanese","japanese","kalaallisut","greenlandic","kannada","kashmiri","kanuri","kazakh","kikuyu","gikuyu","kinyarwanda","kirghiz","kyrgyz","komi","kongo","korean","kuanyama","kwanyama","kurdish","latin","latvian","limburgan","limburger","limburgish","lingala","lithuanian","luxembourgish","letzeburgesch","ganda","macedonian","marshallese","malayalam","maori","marathi","malay","malagasy","maltese","mongolian","nauru","navajo","navaho","ndonga","nepali","norwegian","chichewa","chewa","nyanja","occitan","ojibwa","oriya","oromo","ossetian","ossetic","panjabi","punjabi","pali","polish","portuguese","pushto","pashto","quechua","romansh","romanian","moldavian","moldovan","rundi","russian","sango","sanskrit","sinhala","sinhalese","slovak","slovenian","samoan","shona","sindhi","somali","spanish","castilian","sardinian","serbian","swati","sundanese","swahili","swedish","tahitian","tamil","tatar","telugu","tajik","tagalog","thai","tigrinya","tonga","tswana","tsonga","turkmen","turkish","uighur","uyghur","ukrainian","urdu","uzbek","venda","vietnamese","walloon","wolof","xhosa","yiddish","yoruba","zhuang","chuang","zulu","isoKeys","values","sort","languages","length","toLowerCase","includes","Translate","cache","engine","keys","find","id","Promise","resolve","exp","default"],"sources":["D:/HuaweiMoveData/Users/13565650660/Desktop/WebSite/display_web/node_modules/translate/index.min.js"],"sourcesContent":["function Cache(){var e=Object.create(null);function a(a){delete e[a]}this.set=function(n,i,r){if(void 0!==r&&(\"number\"!=typeof r||isNaN(r)||r<=0))throw new Error(\"Cache timeout must be a positive number\");var t=e[n];t&&clearTimeout(t.timeout);var o={value:i,expire:r+Date.now()};return isNaN(o.expire)||(o.timeout=setTimeout((()=>a(n)),r)),e[n]=o,i},this.del=function(n){var i=!0,r=e[n];return r?(clearTimeout(r.timeout),!isNaN(r.expire)&&r.expire<Date.now()&&(i=!1)):i=!1,i&&a(n),i},this.clear=function(){for(var a in e)clearTimeout(e[a].timeout);e=Object.create(null)},this.get=function(a){var n=e[a];if(void 0!==n){if(isNaN(n.expire)||n.expire>=Date.now())return n.value;delete e[a]}return null}}const exp$1=new Cache;exp$1.Cache=Cache;const base=\"https://translate.googleapis.com/translate_a/single\";var google={fetch:({key:e,from:a,to:n,text:i})=>[`${base}?client=gtx&sl=${a}&tl=${n}&dt=t&q=${encodeURI(i)}`],parse:e=>e.json().then((e=>{if(!(e=e&&e[0]&&e[0][0]&&e[0].map((e=>e[0])).join(\"\")))throw new Error(\"Translation not found\");return e}))},yandex={needkey:!0,fetch:({key:e,from:a,to:n,text:i})=>[`https://translate.yandex.net/api/v1.5/tr.json/translate?key=${e}&lang=${a}-${n}&text=${encodeURIComponent(i)}`,{method:\"POST\",body:\"\"}],parse:e=>e.json().then((e=>{if(200!==e.code)throw new Error(e.message);return e.text[0]}))};const libreUrl=\"https://libretranslate.com/translate\";var libre={needkey:!1,fetch:({url:e=libreUrl,key:a,from:n,to:i,text:r})=>[e,{method:\"POST\",body:JSON.stringify({q:r,source:n,target:i,api_key:a}),headers:{\"Content-Type\":\"application/json\"}}],parse:e=>e.json().then((e=>{if(!e)throw new Error(\"No response found\");if(e.error)throw new Error(e.error);if(!e.translatedText)throw new Error(\"No response found\");return e.translatedText}))},deepl={needkey:!0,fetch:({key:e,from:a,to:n,text:i})=>[`https://api${e.endsWith(\":fx\")?\"-free\":\"\"}.deepl.com/v2/translate?auth_key=${e}&source_lang=${a}&target_lang=${n}&text=${i=encodeURIComponent(i)}`,{method:\"POST\",body:\"\"}],parse:async e=>{if(!e.ok){if(403===e.status)throw new Error(\"Auth Error, please review the key for DeepL\");throw new Error(`Error ${e.status}`)}return e.json().then((e=>e.translations[0].text))}},engines={google:google,yandex:yandex,libre:libre,deepl:deepl},iso={aar:\"aa\",abk:\"ab\",afr:\"af\",aka:\"ak\",alb:\"sq\",amh:\"am\",ara:\"ar\",arg:\"an\",arm:\"hy\",asm:\"as\",ava:\"av\",ave:\"ae\",aym:\"ay\",aze:\"az\",bak:\"ba\",bam:\"bm\",baq:\"eu\",bel:\"be\",ben:\"bn\",bih:\"bh\",bis:\"bi\",bos:\"bs\",bre:\"br\",bul:\"bg\",bur:\"my\",cat:\"ca\",cha:\"ch\",che:\"ce\",chi:\"zh\",chu:\"cu\",chv:\"cv\",cor:\"kw\",cos:\"co\",cre:\"cr\",cze:\"cs\",dan:\"da\",div:\"dv\",dut:\"nl\",dzo:\"dz\",eng:\"en\",epo:\"eo\",est:\"et\",ewe:\"ee\",fao:\"fo\",fij:\"fj\",fin:\"fi\",fre:\"fr\",fry:\"fy\",ful:\"ff\",geo:\"ka\",ger:\"de\",gla:\"gd\",gle:\"ga\",glg:\"gl\",glv:\"gv\",gre:\"el\",grn:\"gn\",guj:\"gu\",hat:\"ht\",hau:\"ha\",heb:\"he\",her:\"hz\",hin:\"hi\",hmo:\"ho\",hrv:\"hr\",hun:\"hu\",ibo:\"ig\",ice:\"is\",ido:\"io\",iii:\"ii\",iku:\"iu\",ile:\"ie\",ina:\"ia\",ind:\"id\",ipk:\"ik\",ita:\"it\",jav:\"jv\",jpn:\"ja\",kal:\"kl\",kan:\"kn\",kas:\"ks\",kau:\"kr\",kaz:\"kk\",khm:\"km\",kik:\"ki\",kin:\"rw\",kir:\"ky\",kom:\"kv\",kon:\"kg\",kor:\"ko\",kua:\"kj\",kur:\"ku\",lao:\"lo\",lat:\"la\",lav:\"lv\",lim:\"li\",lin:\"ln\",lit:\"lt\",ltz:\"lb\",lub:\"lu\",lug:\"lg\",mac:\"mk\",mah:\"mh\",mal:\"ml\",mao:\"mi\",mar:\"mr\",may:\"ms\",mlg:\"mg\",mlt:\"mt\",mon:\"mn\",nau:\"na\",nav:\"nv\",nbl:\"nr\",nde:\"nd\",ndo:\"ng\",nep:\"ne\",nno:\"nn\",nob:\"nb\",nor:\"no\",nya:\"ny\",oci:\"oc\",oji:\"oj\",ori:\"or\",orm:\"om\",oss:\"os\",pan:\"pa\",per:\"fa\",pli:\"pi\",pol:\"pl\",por:\"pt\",pus:\"ps\",que:\"qu\",roh:\"rm\",rum:\"ro\",run:\"rn\",rus:\"ru\",sag:\"sg\",san:\"sa\",sin:\"si\",slo:\"sk\",slv:\"sl\",sme:\"se\",smo:\"sm\",sna:\"sn\",snd:\"sd\",som:\"so\",sot:\"st\",spa:\"es\",srd:\"sc\",srp:\"sr\",ssw:\"ss\",sun:\"su\",swa:\"sw\",swe:\"sv\",tah:\"ty\",tam:\"ta\",tat:\"tt\",tel:\"te\",tgk:\"tg\",tgl:\"tl\",tha:\"th\",tib:\"bo\",tir:\"ti\",ton:\"to\",tsn:\"tn\",tso:\"ts\",tuk:\"tk\",tur:\"tr\",twi:\"tw\",uig:\"ug\",ukr:\"uk\",urd:\"ur\",uzb:\"uz\",ven:\"ve\",vie:\"vi\",vol:\"vo\",wel:\"cy\",wln:\"wa\",wol:\"wo\",xho:\"xh\",yid:\"yi\",yor:\"yo\",zha:\"za\",zul:\"zu\"},names={afar:\"aa\",abkhazian:\"ab\",afrikaans:\"af\",akan:\"ak\",albanian:\"sq\",amharic:\"am\",arabic:\"ar\",aragonese:\"an\",armenian:\"hy\",assamese:\"as\",avaric:\"av\",avestan:\"ae\",aymara:\"ay\",azerbaijani:\"az\",bashkir:\"ba\",bambara:\"bm\",basque:\"eu\",belarusian:\"be\",bengali:\"bn\",\"bihari languages\":\"bh\",bislama:\"bi\",tibetan:\"bo\",bosnian:\"bs\",breton:\"br\",bulgarian:\"bg\",burmese:\"my\",catalan:\"ca\",valencian:\"ca\",czech:\"cs\",chamorro:\"ch\",chechen:\"ce\",chinese:\"zh\",\"church slavic\":\"cu\",\"old slavonic\":\"cu\",\"church slavonic\":\"cu\",\"old bulgarian\":\"cu\",\"old church slavonic\":\"cu\",chuvash:\"cv\",cornish:\"kw\",corsican:\"co\",cree:\"cr\",welsh:\"cy\",danish:\"da\",german:\"de\",divehi:\"dv\",dhivehi:\"dv\",maldivian:\"dv\",dutch:\"nl\",flemish:\"nl\",dzongkha:\"dz\",greek:\"el\",english:\"en\",esperanto:\"eo\",estonian:\"et\",ewe:\"ee\",faroese:\"fo\",persian:\"fa\",fijian:\"fj\",finnish:\"fi\",french:\"fr\",\"western frisian\":\"fy\",fulah:\"ff\",georgian:\"ka\",gaelic:\"gd\",\"scottish gaelic\":\"gd\",irish:\"ga\",galician:\"gl\",manx:\"gv\",guarani:\"gn\",gujarati:\"gu\",haitian:\"ht\",\"haitian creole\":\"ht\",hausa:\"ha\",hebrew:\"he\",herero:\"hz\",hindi:\"hi\",\"hiri motu\":\"ho\",croatian:\"hr\",hungarian:\"hu\",igbo:\"ig\",icelandic:\"is\",ido:\"io\",\"sichuan yi\":\"ii\",nuosu:\"ii\",inuktitut:\"iu\",interlingue:\"ie\",occidental:\"ie\",interlingua:\"ia\",indonesian:\"id\",inupiaq:\"ik\",italian:\"it\",javanese:\"jv\",japanese:\"ja\",kalaallisut:\"kl\",greenlandic:\"kl\",kannada:\"kn\",kashmiri:\"ks\",kanuri:\"kr\",kazakh:\"kk\",\"central khmer\":\"km\",kikuyu:\"ki\",gikuyu:\"ki\",kinyarwanda:\"rw\",kirghiz:\"ky\",kyrgyz:\"ky\",komi:\"kv\",kongo:\"kg\",korean:\"ko\",kuanyama:\"kj\",kwanyama:\"kj\",kurdish:\"ku\",lao:\"lo\",latin:\"la\",latvian:\"lv\",limburgan:\"li\",limburger:\"li\",limburgish:\"li\",lingala:\"ln\",lithuanian:\"lt\",luxembourgish:\"lb\",letzeburgesch:\"lb\",\"luba-katanga\":\"lu\",ganda:\"lg\",macedonian:\"mk\",marshallese:\"mh\",malayalam:\"ml\",maori:\"mi\",marathi:\"mr\",malay:\"ms\",malagasy:\"mg\",maltese:\"mt\",mongolian:\"mn\",nauru:\"na\",navajo:\"nv\",navaho:\"nv\",\"ndebele, south\":\"nr\",\"south ndebele\":\"nr\",\"ndebele, north\":\"nd\",\"north ndebele\":\"nd\",ndonga:\"ng\",nepali:\"ne\",\"norwegian nynorsk\":\"nn\",\"nynorsk, norwegian\":\"nn\",\"norwegian bokmål\":\"nb\",\"bokmål, norwegian\":\"nb\",norwegian:\"no\",chichewa:\"ny\",chewa:\"ny\",nyanja:\"ny\",occitan:\"oc\",ojibwa:\"oj\",oriya:\"or\",oromo:\"om\",ossetian:\"os\",ossetic:\"os\",panjabi:\"pa\",punjabi:\"pa\",pali:\"pi\",polish:\"pl\",portuguese:\"pt\",pushto:\"ps\",pashto:\"ps\",quechua:\"qu\",romansh:\"rm\",romanian:\"ro\",moldavian:\"ro\",moldovan:\"ro\",rundi:\"rn\",russian:\"ru\",sango:\"sg\",sanskrit:\"sa\",sinhala:\"si\",sinhalese:\"si\",slovak:\"sk\",slovenian:\"sl\",\"northern sami\":\"se\",samoan:\"sm\",shona:\"sn\",sindhi:\"sd\",somali:\"so\",\"sotho, southern\":\"st\",spanish:\"es\",castilian:\"es\",sardinian:\"sc\",serbian:\"sr\",swati:\"ss\",sundanese:\"su\",swahili:\"sw\",swedish:\"sv\",tahitian:\"ty\",tamil:\"ta\",tatar:\"tt\",telugu:\"te\",tajik:\"tg\",tagalog:\"tl\",thai:\"th\",tigrinya:\"ti\",tonga:\"to\",tswana:\"tn\",tsonga:\"ts\",turkmen:\"tk\",turkish:\"tr\",twi:\"tw\",uighur:\"ug\",uyghur:\"ug\",ukrainian:\"uk\",urdu:\"ur\",uzbek:\"uz\",venda:\"ve\",vietnamese:\"vi\",\"volapük\":\"vo\",walloon:\"wa\",wolof:\"wo\",xhosa:\"xh\",yiddish:\"yi\",yoruba:\"yo\",zhuang:\"za\",chuang:\"za\",zulu:\"zu\"};const isoKeys=Object.values(iso).sort();var languages=e=>{if(\"string\"!=typeof e)throw new Error('The \"language\" must be a string, received '+typeof e);if(e.length>100)throw new Error(`The \"language\" is too long at ${e.length} characters`);if(e=e.toLowerCase(),e=names[e]||iso[e]||e,!isoKeys.includes(e))throw new Error(`The language \"${e}\" is not part of the ISO 639-1`);return e};const Translate=function(e={}){if(!(this instanceof Translate))return new Translate(e);const a={from:\"en\",to:\"en\",cache:void 0,engine:\"google\",key:void 0,url:void 0,languages:languages,engines:engines,keys:{}},n=async(e,a={})=>{\"string\"==typeof a&&(a={to:a});const i=Object.keys(a).find((e=>\"from\"!==e&&\"to\"!==e));if(i)throw new Error(`Invalid option with the name '${i}'`);a.text=e,a.from=languages(a.from||n.from),a.to=languages(a.to||n.to),a.cache=n.cache,a.engine=n.engine,a.url=n.url,a.id=`${a.url}:${a.from}:${a.to}:${a.engine}:${a.text}`,a.keys=n.keys||{};for(let e in n.keys)a.keys[e]=a.keys[e]||n.keys[e];a.key=a.key||n.key||a.keys[a.engine];const r=n.engines[a.engine],t=exp$1.get(a.id);if(t)return Promise.resolve(t);if(a.to===a.from)return Promise.resolve(a.text);if(r.needkey&&!a.key)throw new Error(`The engine \"${a.engine}\" needs a key, please provide it`);const o=r.fetch(a);return fetch(...o).then(r.parse).then((e=>exp$1.set(a.id,e,a.cache)))};for(let i in a)n[i]=void 0===e[i]?a[i]:e[i];return n},exp=new Translate;exp.Translate=Translate;export{Translate,exp as default};"],"mappings":"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IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC,IAAI;IAACC,GAAG,EAAC;EAAI,CAAC;EAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}